package blueprint

import (
	"encoding/json"
	"fmt"

	"github.com/osbuild/osbuild-composer/internal/common"
)

type PartitioningCustomization struct {
	MinSize uint64                        `json:"minsize,omitempty" toml:"minsize,omitempty"`
	Plain   *PlainFilesystemCustomization `json:"plain,omitempty" toml:"plain,omitempty"`
	LVM     *LVMCustomization             `json:"lvm,omitempty" toml:"lvm,omitempty"`
	Btrfs   *BtrfsCustomization           `json:"btrfs,omitempty" toml:"btrfs,omitempty"`
}

type PlainFilesystemCustomization struct {
	Filesystems []FilesystemCustomization `json:"filesystems,omitempty" toml:"filesystems,omitempty"`
}

type FilesystemCustomization struct {
	Mountpoint string `json:"mountpoint" toml:"mountpoint"`

	// Minimum desired size for the filesystem.
	//
	// Note: The TOML `size` tag has been deprecated in favor of `minsize`. we
	// check for it in the TOML unmarshaler and use it as `minsize`. However
	// due to the TOML marshaler implementation, we can omit adding a field for
	// this tag and get the benifit of not having to export it.
	MinSize uint64 `json:"minsize,omitempty" toml:"minsize,omitempty"`
	Label   string `json:"label,omitempty" toml:"label,omitempty"`
	Type    string `json:"type,omitempty" toml:"type,omitempty"`
}

type LVMCustomization struct {
	VolumeGroups []VGCustomization `json:"volume-groups,omitempty" toml:"volume-groups,omitempty"`
}

type VGCustomization struct {
	// Volume group name
	Name string `json:"name" toml:"name"`
	// Size of the partition that contains the volume group
	MinSize        uint64            `json:"minsize" toml:"minsize"`
	LogicalVolumes []LVCustomization `json:"logical-volumes,omitempty" toml:"logical-volumes,omitempty"`
}

type LVCustomization struct {
	// Logical volume name
	Name string `json:"name,omitempty" toml:"name,omitempty"`
	FilesystemCustomization
}

type BtrfsCustomization struct {
	Volumes []BtrfsVolumeCustomization
}

type BtrfsVolumeCustomization struct {
	// Size of the btrfs partition/volume.
	MinSize    uint64 `json:"minsize" toml:"minsize"`
	Subvolumes []BtrfsSubvolumeCustomization
}

type BtrfsSubvolumeCustomization struct {
	Name       string `json:"name" toml:"name"`
	Mountpoint string `json:"mountpoint" toml:"mountpoint"`
}

// Validate checks for customization combinations that are generally not
// supported or can create conflicts, regardless of specific distro or image
// type policies.
func (p *PartitioningCustomization) Validate() error {
	if p == nil {
		return nil
	}

	if p.Btrfs != nil && p.LVM != nil {
		return fmt.Errorf("btrfs and lvm partitioning cannot be combined")
	}

	if p.Btrfs != nil && len(p.Btrfs.Volumes) > 1 {
		return fmt.Errorf("multiple btrfs volumes are not yet supported")
	}

	if p.LVM != nil && len(p.LVM.VolumeGroups) > 1 {
		return fmt.Errorf("multiple LVM volume groups are not yet supported")
	}

	// iterate through everything and look for:
	// - empty mountpoints (global)
	// - duplicate mountpoints (global)
	// - duplicate volume group and logical volume names (lvm)
	// - duplicate subvolume names (btrfs)
	// - empty subvolume names (btrfs)

	mountpoints := make(map[string]bool)
	if p.Plain != nil {
		for _, mp := range p.Plain.Filesystems {
			if mp.Mountpoint == "" {
				return fmt.Errorf("filesystem with empty mountpoint in partitioning customizations")
			}
			if mountpoints[mp.Mountpoint] {
				return fmt.Errorf("duplicate mountpoint %q in partitioning customizations", mp.Mountpoint)
			}
			mountpoints[mp.Mountpoint] = true
		}
	}

	if p.LVM != nil {
		vgnames := make(map[string]bool)
		for _, vg := range p.LVM.VolumeGroups { // there can be only one VG currently, but keep the check for when we change the rule
			if vg.Name != "" && vgnames[vg.Name] { // VGs with no name get autogenerated names
				return fmt.Errorf("duplicate volume group name %q in partitioning customizations", vg.Name)
			}
			vgnames[vg.Name] = true
			lvnames := make(map[string]bool)
			for _, lv := range vg.LogicalVolumes {
				if lv.Name != "" && lvnames[lv.Name] { // LVs with no name get autogenerated names
					return fmt.Errorf("duplicate lvm logical volume name %q in volume group %q in partitioning customizations", lv.Name, vg.Name)
				}
				lvnames[lv.Name] = true

				if lv.Mountpoint == "" {
					return fmt.Errorf("logical volume with empty mountpoint in partitioning customizations")
				}
				if mountpoints[lv.Mountpoint] {
					return fmt.Errorf("duplicate mountpoint %q in partitioning customizations", lv.Mountpoint)
				}
				mountpoints[lv.Mountpoint] = true
			}
		}
	}

	if p.Btrfs != nil {
		for _, vol := range p.Btrfs.Volumes {
			subvolnames := make(map[string]bool)
			for _, subvol := range vol.Subvolumes {
				if subvol.Name == "" {
					return fmt.Errorf("btrfs subvolume with empty name in partitioning customizations")
				}
				if subvolnames[subvol.Name] {
					return fmt.Errorf("duplicate btrfs subvolume name %q in partitioning customizations", subvol.Name)
				}
				subvolnames[subvol.Name] = true

				if subvol.Mountpoint == "" {
					return fmt.Errorf("btrfs subvolume with empty mountpoint in partitioning customizations")
				}
				if mountpoints[subvol.Mountpoint] {
					return fmt.Errorf("duplicate mountpoint %q in partitioning customizations", subvol.Mountpoint)
				}
				mountpoints[subvol.Mountpoint] = true
			}
		}
	}

	return nil
}

func (fsc *FilesystemCustomization) UnmarshalTOML(data interface{}) error {
	d, _ := data.(map[string]interface{})

	switch d["mountpoint"].(type) {
	case string:
		fsc.Mountpoint = d["mountpoint"].(string)
	default:
		return fmt.Errorf("TOML unmarshal: mountpoint must be string, got %v of type %T", d["mountpoint"], d["mountpoint"])
	}

	switch d["type"].(type) {
	case nil:
		// empty allowed
	case string:
		fsc.Type = d["type"].(string)
	default:
		return fmt.Errorf("TOML unmarshal: type must be string, got %v of type %T", d["type"], d["type"])
	}

	switch d["label"].(type) {
	case nil:
		// empty allowed
	case string:
		fsc.Label = d["label"].(string)
	default:
		return fmt.Errorf("TOML unmarshal: label must be string, got %v of type %T", d["label"], d["label"])
	}

	var size uint64
	var minsize uint64

	// `size` is an alias for `minsize. We check for the `size` keyword
	// for backwards compatibility. We don't export a `Size` field as
	// we would like to discourage its use.
	switch d["size"].(type) {
	case int64:
		size = uint64(d["size"].(int64))
	case string:
		s, err := common.DataSizeToUint64(d["size"].(string))
		if err != nil {
			return fmt.Errorf("TOML unmarshal: size is not valid filesystem size (%w)", err)
		}
		size = s
	case nil:
		size = 0
	default:
		return fmt.Errorf("TOML unmarshal: size must be integer or string, got %v of type %T", d["size"], d["size"])
	}

	switch d["minsize"].(type) {
	case int64:
		minsize = uint64(d["minsize"].(int64))
	case string:
		s, err := common.DataSizeToUint64(d["minsize"].(string))
		if err != nil {
			return fmt.Errorf("TOML unmarshal: minsize is not valid filesystem size (%w)", err)
		}
		minsize = s
	case nil:
		minsize = 0
	default:
		return fmt.Errorf("TOML unmarshal: minsize must be integer or string, got %v of type %T", d["minsize"], d["minsize"])
	}

	if size == 0 && minsize == 0 {
		return fmt.Errorf("TOML unmarshal: minsize must be greater than 0, got %v", minsize)
	}

	if size > 0 && minsize == 0 {
		fsc.MinSize = size
		return nil
	}

	if size == 0 && minsize > 0 {
		fsc.MinSize = minsize
		return nil
	}

	if size > 0 && minsize > 0 {
		return fmt.Errorf("TOML unmarshal: size and minsize cannot both be set (size is an alias for minsize)")
	}

	return nil
}

func (fsc *FilesystemCustomization) UnmarshalJSON(data []byte) error {
	var v interface{}
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	d, _ := v.(map[string]interface{})

	switch d["mountpoint"].(type) {
	case string:
		fsc.Mountpoint = d["mountpoint"].(string)
	default:
		return fmt.Errorf("JSON unmarshal: mountpoint must be string, got %v of type %T", d["mountpoint"], d["mountpoint"])
	}

	switch d["type"].(type) {
	case nil:
		// empty allowed
	case string:
		fsc.Type = d["type"].(string)
	default:
		return fmt.Errorf("JSON unmarshal: type must be string, got %v of type %T", d["type"], d["type"])
	}

	switch d["label"].(type) {
	case nil:
		// empty allowed
	case string:
		fsc.Label = d["label"].(string)
	default:
		return fmt.Errorf("JSON unmarshal: label must be string, got %v of type %T", d["label"], d["label"])
	}

	// The JSON specification only mentions float64 and Go defaults to it: https://go.dev/blog/json
	switch d["minsize"].(type) {
	case float64:
		// Note that it uses different key than the TOML version
		fsc.MinSize = uint64(d["minsize"].(float64))
	case string:
		size, err := common.DataSizeToUint64(d["minsize"].(string))
		if err != nil {
			return fmt.Errorf("JSON unmarshal: size is not valid filesystem size (%w)", err)
		}
		fsc.MinSize = size
	default:
		return fmt.Errorf("JSON unmarshal: minsize must be float64 number or string, got %v of type %T", d["minsize"], d["minsize"])
	}

	return nil
}
