// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ComposeStatusValue.
const (
	ComposeStatusValueFailure ComposeStatusValue = "failure"

	ComposeStatusValuePending ComposeStatusValue = "pending"

	ComposeStatusValueSuccess ComposeStatusValue = "success"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAwsHaRhui ImageTypes = "aws-ha-rhui"

	ImageTypesAwsRhui ImageTypes = "aws-rhui"

	ImageTypesAwsSapRhui ImageTypes = "aws-sap-rhui"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesAzureRhui ImageTypes = "azure-rhui"

	ImageTypesAzureSapRhui ImageTypes = "azure-sap-rhui"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGcpRhui ImageTypes = "gcp-rhui"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesIotCommit ImageTypes = "iot-commit"

	ImageTypesIotContainer ImageTypes = "iot-container"

	ImageTypesIotInstaller ImageTypes = "iot-installer"

	ImageTypesIotRawImage ImageTypes = "iot-raw-image"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesContainer UploadTypes = "container"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2CloneCompose defines model for AWSEC2CloneCompose.
type AWSEC2CloneCompose struct {
	Region            string    `json:"region"`
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	// If set to false (the default value), a long, obfuscated URL
	// is returned. Its expiration might be sooner than for other upload
	// targets.
	//
	// If set to true, a shorter URL is returned and
	// its expiration is the same as for the other upload targets.
	Public *bool  `json:"public,omitempty"`
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location of the provided resource_group, where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	// If the location is not specified, it is deducted from the provided resource_group.
	Location *string `json:"location,omitempty"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// CloneComposeBody defines model for CloneComposeBody.
type CloneComposeBody interface{}

// CloneComposeResponse defines model for CloneComposeResponse.
type CloneComposeResponse struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// CloneStatus defines model for CloneStatus.
type CloneStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/UploadStatus)
	UploadStatus `yaml:",inline"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeLogs defines model for ComposeLogs.
type ComposeLogs struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageBuilds []interface{} `json:"image_builds"`
	Koji        *KojiLogs     `json:"koji,omitempty"`
}

// ComposeManifests defines model for ComposeManifests.
type ComposeManifests struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Manifests []interface{} `json:"manifests"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   *ImageRequest   `json:"image_request,omitempty"`
	ImageRequests  *[]ImageRequest `json:"image_requests,omitempty"`
	Koji           *Koji           `json:"koji,omitempty"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus   ImageStatus        `json:"image_status"`
	ImageStatuses *[]ImageStatus     `json:"image_statuses,omitempty"`
	KojiStatus    *KojiStatus        `json:"koji_status,omitempty"`
	Status        ComposeStatusValue `json:"status"`
}

// ComposeStatusError defines model for ComposeStatusError.
type ComposeStatusError struct {
	Details *interface{} `json:"details,omitempty"`
	Id      int          `json:"id"`
	Reason  string       `json:"reason"`
}

// ComposeStatusValue defines model for ComposeStatusValue.
type ComposeStatusValue string

// Container defines model for Container.
type Container struct {
	// Name to use for the container from the image
	Name   *string `json:"name,omitempty"`
	Source string  `json:"source"`

	// Control TLS verifification
	TlsVerify *bool `json:"tls_verify,omitempty"`
}

// ContainerUploadOptions defines model for ContainerUploadOptions.
type ContainerUploadOptions struct {
	// Name for the created container image
	Name *string `json:"name,omitempty"`

	// Tag for the created container image
	Tag *string `json:"tag,omitempty"`
}

// ContainerUploadStatus defines model for ContainerUploadStatus.
type ContainerUploadStatus struct {
	// Digest of the manifest of the uploaded container on the registry
	Digest string `json:"digest"`

	// FQDN of the uploaded image
	Url string `json:"url"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Containers  *[]Container  `json:"containers,omitempty"`
	Directories *[]Directory  `json:"directories,omitempty"`
	Files       *[]File       `json:"files,omitempty"`
	Filesystem  *[]Filesystem `json:"filesystem,omitempty"`
	Packages    *[]string     `json:"packages,omitempty"`

	// Extra repositories for packages specified in customizations. These
	// repositories will only be used to depsolve and retrieve packages
	// for the OS itself (they will not be available for the build root or
	// any other part of the build process). The package_sets field for these
	// repositories is ignored.
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Services            *struct {
		// List of services to disable by default
		Disabled *[]string `json:"disabled,omitempty"`

		// List of services to enable by default
		Enabled *[]string `json:"enabled,omitempty"`
	} `json:"services,omitempty"`
	Subscription *Subscription `json:"subscription,omitempty"`
	Users        *[]User       `json:"users,omitempty"`
}

// Directory defines model for Directory.
type Directory struct {
	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the directory as a group name or a gid
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the directory in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the directory
	Path string `json:"path"`

	// Owner of the directory as a user name or a uid
	User *interface{} `json:"user,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string       `json:"code"`
	Details     *interface{} `json:"details,omitempty"`
	OperationId string       `json:"operation_id"`
	Reason      string       `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// File defines model for File.
type File struct {
	// Contents of the file as plain text
	Data *string `json:"data,omitempty"`

	// Ensure that the parent directories exist
	EnsureParents *bool `json:"ensure_parents,omitempty"`

	// Group of the file as a gid or a group name
	Group *interface{} `json:"group,omitempty"`

	// Permissions string for the file in octal format
	Mode *string `json:"mode,omitempty"`

	// Path to the file
	Path string `json:"path"`

	// Owner of the file as a uid or a user name
	User *interface{} `json:"user,omitempty"`
}

// Filesystem defines model for Filesystem.
type Filesystem struct {
	MinSize    uint64 `json:"min_size"`
	Mountpoint string `json:"mountpoint"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket *string `json:"bucket,omitempty"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture string       `json:"architecture"`
	ImageType    ImageTypes   `json:"image_type"`
	Ostree       *OSTree      `json:"ostree,omitempty"`
	Repositories []Repository `json:"repositories"`

	// This should really be oneOf but AWSS3UploadOptions is a subset of
	// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
	// are also valid AWSS3UploadOptionas objects which violates the oneOf
	// rules. Therefore, we have to use anyOf here but be aware that it isn't
	// possible to mix and match more schemas together.
	UploadOptions *UploadOptions `json:"upload_options,omitempty"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Error        *ComposeStatusError `json:"error,omitempty"`
	Status       ImageStatusValue    `json:"status"`
	UploadStatus *UploadStatus       `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// Koji defines model for Koji.
type Koji struct {
	Name    string `json:"name"`
	Release string `json:"release"`
	Server  string `json:"server"`
	TaskId  int    `json:"task_id"`
	Version string `json:"version"`
}

// KojiLogs defines model for KojiLogs.
type KojiLogs struct {
	Import interface{} `json:"import"`
	Init   interface{} `json:"init"`
}

// KojiStatus defines model for KojiStatus.
type KojiStatus struct {
	BuildId *int `json:"build_id,omitempty"`
}

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	// A URL which, if set, is used for fetching content. Implies that `url` is set as well,
	// which will be used for metadata only.
	Contenturl *string `json:"contenturl,omitempty"`

	// Can be either a commit (example: 02604b2da6e954bd34b8b82a835e5a77d2b60ffa), or a branch-like reference (example: rhel/8/x86_64/edge)
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`

	// Determines whether a valid subscription manager (candlepin) identity is required to
	// access this repository. Consumer certificates will be used as client certificates when
	// fetching metadata and content.
	Rhsm *bool   `json:"rhsm,omitempty"`
	Url  *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository configuration.
// At least one of the 'baseurl', 'mirrorlist', 'metalink' properties must
// be specified. If more of them are specified, the order of precedence is
// the same as listed above.
type Repository struct {
	Baseurl  *string `json:"baseurl,omitempty"`
	CheckGpg *bool   `json:"check_gpg,omitempty"`

	// GPG key used to sign packages in this repository.
	Gpgkey     *string `json:"gpgkey,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`

	// Naming package sets for a repository assigns it to a specific part
	// (pipeline) of the build process.
	PackageSets *[]string `json:"package_sets,omitempty"`

	// Determines whether a valid subscription is required to access this repository.
	Rhsm *bool `json:"rhsm,omitempty"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`

	// Optional flag to use rhc to register the system, which also always enables Insights.
	Rhc       *bool  `json:"rhc,omitempty"`
	ServerUrl string `json:"server_url"`
}

// This should really be oneOf but AWSS3UploadOptions is a subset of
// AWSEC2UploadOptions. This means that all AWSEC2UploadOptions objects
// are also valid AWSS3UploadOptionas objects which violates the oneOf
// rules. Therefore, we have to use anyOf here but be aware that it isn't
// possible to mix and match more schemas together.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// PostCloneComposeJSONBody defines parameters for PostCloneCompose.
type PostCloneComposeJSONBody CloneComposeBody

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// PostCloneComposeJSONRequestBody defines body for PostCloneCompose for application/json ContentType.
type PostCloneComposeJSONRequestBody PostCloneComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// The status of a cloned compose
	// (GET /clones/{id})
	GetCloneStatus(ctx echo.Context, id string) error
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Clone an existing compose
	// (POST /composes/{id}/clone)
	PostCloneCompose(ctx echo.Context, id string) error
	// Get logs for a compose.
	// (GET /composes/{id}/logs)
	GetComposeLogs(ctx echo.Context, id string) error
	// Get the manifests for a compose.
	// (GET /composes/{id}/manifests)
	GetComposeManifests(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetCloneStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetCloneStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCloneStatus(ctx, id)
	return err
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// PostCloneCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCloneCompose(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCloneCompose(ctx, id)
	return err
}

// GetComposeLogs converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeLogs(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeLogs(ctx, id)
	return err
}

// GetComposeManifests converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeManifests(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeManifests(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/clones/:id", wrapper.GetCloneStatus)
	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.POST(baseURL+"/composes/:id/clone", wrapper.PostCloneCompose)
	router.GET(baseURL+"/composes/:id/logs", wrapper.GetComposeLogs)
	router.GET(baseURL+"/composes/:id/manifests", wrapper.GetComposeManifests)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
