// Package v2 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.8.2 DO NOT EDIT.
package v2

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerScopes = "Bearer.Scopes"
)

// Defines values for ImageStatusValue.
const (
	ImageStatusValueBuilding ImageStatusValue = "building"

	ImageStatusValueFailure ImageStatusValue = "failure"

	ImageStatusValuePending ImageStatusValue = "pending"

	ImageStatusValueRegistering ImageStatusValue = "registering"

	ImageStatusValueSuccess ImageStatusValue = "success"

	ImageStatusValueUploading ImageStatusValue = "uploading"
)

// Defines values for ImageTypes.
const (
	ImageTypesAws ImageTypes = "aws"

	ImageTypesAzure ImageTypes = "azure"

	ImageTypesEdgeCommit ImageTypes = "edge-commit"

	ImageTypesEdgeContainer ImageTypes = "edge-container"

	ImageTypesEdgeInstaller ImageTypes = "edge-installer"

	ImageTypesGcp ImageTypes = "gcp"

	ImageTypesGuestImage ImageTypes = "guest-image"

	ImageTypesImageInstaller ImageTypes = "image-installer"

	ImageTypesVsphere ImageTypes = "vsphere"
)

// Defines values for UploadStatusValue.
const (
	UploadStatusValueFailure UploadStatusValue = "failure"

	UploadStatusValuePending UploadStatusValue = "pending"

	UploadStatusValueRunning UploadStatusValue = "running"

	UploadStatusValueSuccess UploadStatusValue = "success"
)

// Defines values for UploadTypes.
const (
	UploadTypesAws UploadTypes = "aws"

	UploadTypesAwsS3 UploadTypes = "aws.s3"

	UploadTypesAzure UploadTypes = "azure"

	UploadTypesGcp UploadTypes = "gcp"
)

// AWSEC2UploadOptions defines model for AWSEC2UploadOptions.
type AWSEC2UploadOptions struct {
	Region            string   `json:"region"`
	ShareWithAccounts []string `json:"share_with_accounts"`
	SnapshotName      *string  `json:"snapshot_name,omitempty"`
}

// AWSEC2UploadStatus defines model for AWSEC2UploadStatus.
type AWSEC2UploadStatus struct {
	Ami    string `json:"ami"`
	Region string `json:"region"`
}

// AWSS3UploadOptions defines model for AWSS3UploadOptions.
type AWSS3UploadOptions struct {
	Region string `json:"region"`
}

// AWSS3UploadStatus defines model for AWSS3UploadStatus.
type AWSS3UploadStatus struct {
	Url string `json:"url"`
}

// AzureUploadOptions defines model for AzureUploadOptions.
type AzureUploadOptions struct {
	// Name of the uploaded image. It must be unique in the given resource group.
	// If name is omitted from the request, a random one based on a UUID is
	// generated.
	ImageName *string `json:"image_name,omitempty"`

	// Location where the image should be uploaded and registered.
	// How to list all locations:
	// https://docs.microsoft.com/en-us/cli/azure/account?view=azure-cli-latest#az_account_list_locations'
	Location string `json:"location"`

	// Name of the resource group where the image should be uploaded.
	ResourceGroup string `json:"resource_group"`

	// ID of subscription where the image should be uploaded.
	SubscriptionId string `json:"subscription_id"`

	// ID of the tenant where the image should be uploaded.
	// How to find it in the Azure Portal:
	// https://docs.microsoft.com/en-us/azure/active-directory/fundamentals/active-directory-how-to-find-tenant
	TenantId string `json:"tenant_id"`
}

// AzureUploadStatus defines model for AzureUploadStatus.
type AzureUploadStatus struct {
	ImageName string `json:"image_name"`
}

// ComposeId defines model for ComposeId.
type ComposeId struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Id string `json:"id"`
}

// ComposeMetadata defines model for ComposeMetadata.
type ComposeMetadata struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	// ID (hash) of the built commit
	OstreeCommit *string `json:"ostree_commit,omitempty"`

	// Package list including NEVRA
	Packages *[]PackageMetadata `json:"packages,omitempty"`
}

// ComposeRequest defines model for ComposeRequest.
type ComposeRequest struct {
	Customizations *Customizations `json:"customizations,omitempty"`
	Distribution   string          `json:"distribution"`
	ImageRequest   ImageRequest    `json:"image_request"`
}

// ComposeStatus defines model for ComposeStatus.
type ComposeStatus struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	ImageStatus ImageStatus `json:"image_status"`
}

// Customizations defines model for Customizations.
type Customizations struct {
	Packages            *[]string     `json:"packages,omitempty"`
	PayloadRepositories *[]Repository `json:"payload_repositories,omitempty"`
	Subscription        *Subscription `json:"subscription,omitempty"`
	Users               *[]User       `json:"users,omitempty"`
}

// Error defines model for Error.
type Error struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Code        string `json:"code"`
	OperationId string `json:"operation_id"`
	Reason      string `json:"reason"`
}

// ErrorList defines model for ErrorList.
type ErrorList struct {
	// Embedded struct due to allOf(#/components/schemas/List)
	List `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Items []Error `json:"items"`
}

// GCPUploadOptions defines model for GCPUploadOptions.
type GCPUploadOptions struct {
	// Name of an existing STANDARD Storage class Bucket.
	Bucket string `json:"bucket"`

	// The name to use for the imported and shared Compute Engine image.
	// The image name must be unique within the GCP project, which is used
	// for the OS image upload and import. If not specified a random
	// 'composer-api-<uuid>' string is used as the image name.
	ImageName *string `json:"image_name,omitempty"`

	// The GCP region where the OS image will be imported to and shared from.
	// The value must be a valid GCP location. See https://cloud.google.com/storage/docs/locations.
	// If not specified, the multi-region location closest to the source
	// (source Storage Bucket location) is chosen automatically.
	Region string `json:"region"`

	// List of valid Google accounts to share the imported Compute Engine image with.
	// Each string must contain a specifier of the account type. Valid formats are:
	//   - 'user:{emailid}': An email address that represents a specific
	//     Google account. For example, 'alice@example.com'.
	//   - 'serviceAccount:{emailid}': An email address that represents a
	//     service account. For example, 'my-other-app@appspot.gserviceaccount.com'.
	//   - 'group:{emailid}': An email address that represents a Google group.
	//     For example, 'admins@example.com'.
	//   - 'domain:{domain}': The G Suite domain (primary) that represents all
	//     the users of that domain. For example, 'google.com' or 'example.com'.
	// If not specified, the imported Compute Engine image is not shared with any
	// account.
	ShareWithAccounts *[]string `json:"share_with_accounts,omitempty"`
}

// GCPUploadStatus defines model for GCPUploadStatus.
type GCPUploadStatus struct {
	ImageName string `json:"image_name"`
	ProjectId string `json:"project_id"`
}

// ImageRequest defines model for ImageRequest.
type ImageRequest struct {
	Architecture  string        `json:"architecture"`
	ImageType     ImageTypes    `json:"image_type"`
	Ostree        *OSTree       `json:"ostree,omitempty"`
	Repositories  []Repository  `json:"repositories"`
	UploadOptions UploadOptions `json:"upload_options"`
}

// ImageStatus defines model for ImageStatus.
type ImageStatus struct {
	Status       ImageStatusValue `json:"status"`
	UploadStatus *UploadStatus    `json:"upload_status,omitempty"`
}

// ImageStatusValue defines model for ImageStatusValue.
type ImageStatusValue string

// ImageTypes defines model for ImageTypes.
type ImageTypes string

// List defines model for List.
type List struct {
	Kind  string `json:"kind"`
	Page  int    `json:"page"`
	Size  int    `json:"size"`
	Total int    `json:"total"`
}

// OSTree defines model for OSTree.
type OSTree struct {
	Parent *string `json:"parent,omitempty"`
	Ref    *string `json:"ref,omitempty"`
	Url    *string `json:"url,omitempty"`
}

// ObjectReference defines model for ObjectReference.
type ObjectReference struct {
	Href string `json:"href"`
	Id   string `json:"id"`
	Kind string `json:"kind"`
}

// PackageMetadata defines model for PackageMetadata.
type PackageMetadata struct {
	Arch      string  `json:"arch"`
	Epoch     *string `json:"epoch,omitempty"`
	Name      string  `json:"name"`
	Release   string  `json:"release"`
	Sigmd5    string  `json:"sigmd5"`
	Signature *string `json:"signature,omitempty"`
	Type      string  `json:"type"`
	Version   string  `json:"version"`
}

// Repository defines model for Repository.
type Repository struct {
	Baseurl    *string `json:"baseurl,omitempty"`
	CheckGpg   *bool   `json:"check_gpg,omitempty"`
	GpgKey     *string `json:"gpg_key,omitempty"`
	IgnoreSsl  *bool   `json:"ignore_ssl,omitempty"`
	Metalink   *string `json:"metalink,omitempty"`
	Mirrorlist *string `json:"mirrorlist,omitempty"`
	Rhsm       bool    `json:"rhsm"`
}

// Subscription defines model for Subscription.
type Subscription struct {
	ActivationKey string `json:"activation_key"`
	BaseUrl       string `json:"base_url"`
	Insights      bool   `json:"insights"`
	Organization  string `json:"organization"`
	ServerUrl     string `json:"server_url"`
}

// UploadOptions defines model for UploadOptions.
type UploadOptions interface{}

// UploadStatus defines model for UploadStatus.
type UploadStatus struct {
	Options interface{}       `json:"options"`
	Status  UploadStatusValue `json:"status"`
	Type    UploadTypes       `json:"type"`
}

// UploadStatusValue defines model for UploadStatusValue.
type UploadStatusValue string

// UploadTypes defines model for UploadTypes.
type UploadTypes string

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ObjectReference)
	ObjectReference `yaml:",inline"`
	// Embedded fields due to inline allOf schema
	Groups *[]string `json:"groups,omitempty"`
	Key    *string   `json:"key,omitempty"`
	Name   string    `json:"name"`
}

// Page defines model for page.
type Page string

// Size defines model for size.
type Size string

// PostComposeJSONBody defines parameters for PostCompose.
type PostComposeJSONBody ComposeRequest

// GetErrorListParams defines parameters for GetErrorList.
type GetErrorListParams struct {
	// Page index
	Page *Page `json:"page,omitempty"`

	// Number of items in each page
	Size *Size `json:"size,omitempty"`
}

// PostComposeJSONRequestBody defines body for PostCompose for application/json ContentType.
type PostComposeJSONRequestBody PostComposeJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create compose
	// (POST /compose)
	PostCompose(ctx echo.Context) error
	// The status of a compose
	// (GET /composes/{id})
	GetComposeStatus(ctx echo.Context, id string) error
	// Get the metadata for a compose.
	// (GET /composes/{id}/metadata)
	GetComposeMetadata(ctx echo.Context, id string) error
	// Get a list of all possible errors
	// (GET /errors)
	GetErrorList(ctx echo.Context, params GetErrorListParams) error
	// Get error description
	// (GET /errors/{id})
	GetError(ctx echo.Context, id string) error
	// Get the openapi spec in json format
	// (GET /openapi)
	GetOpenapi(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostCompose converts echo context to params.
func (w *ServerInterfaceWrapper) PostCompose(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCompose(ctx)
	return err
}

// GetComposeStatus converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeStatus(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeStatus(ctx, id)
	return err
}

// GetComposeMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetComposeMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetComposeMetadata(ctx, id)
	return err
}

// GetErrorList converts echo context to params.
func (w *ServerInterfaceWrapper) GetErrorList(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetErrorListParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "size" -------------

	err = runtime.BindQueryParameter("form", true, false, "size", ctx.QueryParams(), &params.Size)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter size: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetErrorList(ctx, params)
	return err
}

// GetError converts echo context to params.
func (w *ServerInterfaceWrapper) GetError(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id string

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetError(ctx, id)
	return err
}

// GetOpenapi converts echo context to params.
func (w *ServerInterfaceWrapper) GetOpenapi(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetOpenapi(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/compose", wrapper.PostCompose)
	router.GET(baseURL+"/composes/:id", wrapper.GetComposeStatus)
	router.GET(baseURL+"/composes/:id/metadata", wrapper.GetComposeMetadata)
	router.GET(baseURL+"/errors", wrapper.GetErrorList)
	router.GET(baseURL+"/errors/:id", wrapper.GetError)
	router.GET(baseURL+"/openapi", wrapper.GetOpenapi)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbe28bOZL/KkTvAZ7BdUuyXrYFDGYdx5v13uQB25nFXWwYFLuk5rqb7JBsK0rg737g",
	"o1v9oCx5xzOLAfJPLIlk1a+KVcWqIvMtIDzLOQOmZDD7FuRY4AwUCPdtCfpvDJIImivKWTALPuAlIMpi",
	"+BKEAXzBWZ5CY/oDTgsIZsFh8PgYBlSv+VyAWAdhwHCmR8zMMJAkgQzrJWqd69+lEpQtzTJJv3p4vyuy",
	"OQjEF4gqyCSiDAEmCXIE62hKAhWawWArHjP3KTyP5aAhffrPq/Oz4cc85Th+b6BZ+QXPQShq+QtYGszf",
	"SlTBLIAiWoFU0WEQtlmEgUywgLsVVckdJoQXbkuq1Z+Cw+FoPJkeHZ8MDofBbRgYHXjgVsSxEHhtaDOc",
	"y4SrOytwHVO2jsrRLqrHMBDwuaACYg3AyeTHelut5vN/AVGab11TVwqrwqMonNEmIpzRaECOR4Ojk9HR",
	"0WRyMonHc5/GnqniljCab0VjC/ir0cvusl+fO5hvU1whUr/v1FnoSV76XwsBO4SjGV5CZTItT8QZaD9U",
	"CaDCkIEYmQU9dKFQVkiF5oAKRj8XOlyYiUv6AAwJkLwQBNBS8CLv3bCLBdJMEJWIZ1QpiNFC8Mws0bKA",
	"VCHCSGAW8wxxBmiOJcSIM4TRx48XrxGVN2wJDARWEPdu2CYWWAs3wHwmlHKCldvBpoC/uBG0SkCAwWKo",
	"IJnwIo2NcKXcmMVI76VUIAz/v/MVUhylVCqE0xSVbOTshiVK5XLW78ecyF5GieCSL1SP8KwPLCpkn6S0",
	"j/X29J1v/fxAYfWT+SkiKY1SrECqv+CvpfPdaUZ3FZODlgK0NUKht9bvRXY77sx2PL3Tza3bQzXtvbjm",
	"BcHs0pF5Yzj6YmExryDc0bgL6uK1hlSf9m+AGcMkPp4PSYTnw3E0Hh+OopMBmUTTw+FoMIXjwQkMfegU",
	"MMzUE7g0CDtpP1TOXBaUxYiq0luMi6IPXCic7mM3pc0o+gBRTAUQxcW6vyhYjDNgCqeyMxolfBUpHmnW",
	"kYXcUtKEHMFiMp9Gh2S0iMYxHkR4OhxGg/lgOhiOTuKj+GhnoNtorLu3HQuseeWOyLUtMjYD1z6RoIW3",
	"RsAH4UwnTRIujAHgNH2/CGafvgX/JWARzIK/9DdJVd+lDf33ZvElLEAAIxA8hh3QcRPs4XAE+riP4Phk",
	"Hh0O41GEx5NpNB5Op5PJeDwYDAZBGCy4yLAKZkFRGGXuECz2CHS7EektKBxjhV9SMC6VALgjPMuo8rrM",
	"DwmWyY+l58wLmirkpnvcL8fkHi8t7XZqakZs3KWMpEVM2RK9O//18jSo5UtPyeNoVIroZFOPT+nv0h5X",
	"XZMkhVQ8o19xddY+BeKsOfsxDGKqFTAvVCfdEAmk0bFPUdaKxQbSUywv9OQSfttsGtzbhGvibxzyxbzC",
	"sJIV3Z0iOAh+j3Z0trhAZ4uaUOp2V8vKcy7VUoB8Xkae47WOYHcCci6p4qKUdx8bvSwXrb3Jfi3A7qJ0",
	"VZ/7GAaFdLXfXjg+ShD7OEgYnAvBxUvaBeExeBWtJ+Fa3uDJd7C0ink6VBoO1fQWYb8FGSl/odbZ9pPU",
	"zPaYfan+vfbBate3EQ0XMKT8yN+cfdhRDMwLcg9qe3qIGYIvVCodcK+uT9+9Pr18ja4UFzogkxRLiV4Z",
	"Er12cu6+RI7D1kDmL0SuE7DVg+KokIAWXLh0K+dCueTc1Ksx0lGqUIDO2ZIyl5H1bth1lZ0ZQq3aRVe5",
	"LiN7c/YB5YJrtYVolVCS6JqlkBDfsJLv+ytHy+Z3hr3F0kO60OEKyRwIXVCNzRU1N+yA2AgqIpzT6KYY",
	"DEZEn+jmExwgq4ySHcKyllNq1M8pejZFa1eVWkQ7XktdK5lWNE21airlKl7Xr67anD5N26VSJdbfaWyo",
	"l8ldD10BoDKrJSkv4t6S82UKJqeV1nRMutuvShtXLdaVGBqIWZEqGjnk5XREUi5BKg1TT7Jp5g37wVUx",
	"pXlaw6yW/ajVTBIugSFcKJ5hRQlO03VbyVA8o5HTKi91isIXpV6M3KicrvEaKk1L9pmvMc/eDTvHJCmN",
	"xGidcKYw1RVyqSlRJliODdLIe+hXg8CmkRJhAbMbhlCEDvRZMPsGGaYpjR8PZuiUIfMN4TgWILUJYoUE",
	"5AKkjkcbXkSTQC2xeuhvXCCnvRAd4JQS+Kv7rvf8oOc4SxAPlMCpXfdMDJa1I7GNd7aOuEqMt+V/xXku",
	"c656S7eoXFOHZEqT52rDyV/2OTSulgrijDLp1UHMM0zZ7Jv9qxka90RXBVWA7K/oh1zQDIv1j13maWoZ",
	"mgaNPtXt7mPl1rY1snG9A8QFOmhh8nvd06ZJpV1jg4M2VITZ+oaV+m160yeTfMw6VqFLxqY97Lt5QRjY",
	"beuqOQgDp+D6j8/I4LZ1Rt0h5qsaqzP25crWMHDH0V27esSSAIsxU9FcYBpHo8FocjjaWR/WyIW7quBG",
	"xdBt6wqSUAVEFaIlzpfj6d10vP2ctz/vkepfr3MwxZGtMHeteX91rWcZiV886ban/R3P96rvmrlWpzNd",
	"V11DKy3oHba35bZsM7FnF1K/muuTjYD7EWjYeVu8sghrYrWMtKGwIjPTCkJAaiEXmKZWFTkwXdEbP6Op",
	"+2iR2c9lF1Z/u/VYWM1uaqzwSrMx/TMdkeIlRFX7wX0zhymI8gfKpMJpan5Yklz/q92g8lPztzHrQeY6",
	"n/KiKkuG5l7dU+avYMqLNjdAmYKlLcTKS6/uiOIKp76h1uYYpmF1Q2cvxuzicGsFEQbOtzw1swCmav7v",
	"ijetXBezZJHpIyyYBaeu6YMuXmuFuYu7wXA6GM+HMZ7CyWQ8j0fj+fH8eIiPRxOY4KOjeDifDhYLbB17",
	"0SY5F5iRJErpPSA9vCEsEkj7x30bjvp6W+u1az1dXnQ7Lq2FnmVbr2e6ymtVux0tJg5CN2D6DWSL5XR7",
	"gWG534aDb2Pb7TBvnPeCgJxvGSlPOI+mU8DSPybpMosn24YYLs+ZLee2Z+ABhKT7dAJc6DWwN8s2cEOr",
	"hAqjjmy106JbSmMJzjo2RlUVQjHrCYgTbFv7OvIAU/2YStXXhne8sTxNh8s+l/1GH1ikPnMkCZD7u2W+",
	"rMk75zwFbBo/y3x5dw9rv5UtGRdwJ2XqX5uBwill936BMioEF7K3gJgL7BKMHhfLfrnuZ32o/WTHo9FQ",
	"l7zDqVbpT1WqsEs6yyR1cbQJosKgh3sEmOLS8P/ZbeBPx5FOIHBW44z1v9Ox/cXge4UlvL/aA4tIZOZT",
	"VDtl1NN8LnfV6t+1/I0o+mD7UG6/mnf5QASoSA/VkOZYyhUXsQ+utqI7rzl2rXEP6SmTdJm03i4oUUDo",
	"sRwulpi5jmuT/3AwHoyG3ixRJ/ogupDrfc+e1m4N+c7Et4EkbGu5wbSmspq4vp3stNQ4gz16gr73JY/h",
	"zjXtxwq7lnR6fjt5dN8MmObh01UN/y3ilynk/tLvuaJdjD1D9nKFFv356XCVUO9T5tiFrs7xp9FheTzV",
	"a4Auw70Ta1Ewti17rsPpps8r2ZOjKh+22bSXioQXvQowNX6zjtsEBTPofW/VruA60VTKJIJ4OJkcnqDT",
	"09PTs9G7r/jsMP2/1xeH767PJ/q3i3fizf+ci7f/S//77duPq+Lv+PL0H9nlL/zi6+Vi+Pn1MH49+Tp4",
	"df2lP/3iA9Et9gsJYvfLoS1F+a15qQakEFStr7QGrYpeARZW6XPz6W9lEP/HP6/Lh28mNNt5FV19Ctjn",
	"b5QteLeLeeW6bIqbW1vX7bZVj20CyV4QBiklwGxe517cneaYJICGvUHgMuUqX1itVj1shs0h7dbK/i8X",
	"Z+fvrs6jYW/QS1SWmj2kyijt/dUrw95dQwpk2skI57SWsM2CobsgYnpgFox6g96hKXZUYtTUd014E8S4",
	"9Nx2nAnAChBGDFbIzQ5RznWORnGarhHhTLprEL5AEh5A4FIXRj3uXsC8W7R9aSpQDHqJ63HXL5su4mAW",
	"fOBSOdECawcg1Sser20xZTJE41F5nlLbw+7/y11ybR41Pnnh3Ly+fmzamz6+7UuhnOu90NSGg8OX5n4R",
	"W8YtldtBlGCJpMJCQay3cTwYvBh/d3/W5X3BbH/e7XT5Gs3yP/z9+Z8WShvJPTBEJaIWjeU++v25f2S4",
	"UAkX9Ku96clB6OwPVcZpkYz/CCT3jK9YtQ9WCZM/wgQ+MviSA1EQI9BzECekENot6rHWHGNllP10+3gb",
	"1poQLmiUwUWvKyON7H+j8aM5xXyXq29A2Ysrc5Kba1bkDmjEhaGYgobmyJnLN2MpJC1ikGiVgEpA6MmM",
	"W1qlDk0aADHE3XjzBlTzQUfYeBn+yf/qrSJswSqOluY617y41jF28+DaPfuqx5f68+sXfwR12wleg5cO",
	"XlWzs2NBTb38x2JXGTi+h63vYWuvsHXdCjzb45fp5JTtwScDWTnRUlxQRmXSCl+A4AsmCumMU3s15QwJ",
	"UIVgEKMYdKUiEWf11+Hl03N7o/1EOKvamN8D2s6AtnkB2bWu6/pWli9f7Ov+ciu/x7nvce7PEec6sUkb",
	"NK4Zso53hrisxbdOiNk8/usEF59kmyl9c9m2rQFVm2du435X19/I4LN2+66aL5BTxnc3+8+4mTX0P5+T",
	"4cqAcJqinEtJ5ylU1rRxs91FEWa2zcRI9X+TLLLN28r5Gpmj0++o+2UAFd3feuqP/uAzvNrK7z763Uef",
	"46N2bZ208cuqabr9/HvvpvitugnWkTPeiihDWgfuCeqfMXN4UpzH6srSF2feumecPC6IfXts53ba4jin",
	"Pc1HJtT9rz+c0759Z2R67yCi8g15/2Fo8olWs17hJWXLpxhIhZfwG9kYJbLymWnFZhed28f/DwAA///Y",
	"zrzXjUAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
